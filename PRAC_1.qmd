---
title: "Practical_One Solutions"
format: html
editor: visual
output: html_document 
---

## Question 1: Missing Values

1st 6 rows of airquality dataset displayed below:

```{r}
head(airquality)

```

Display rows with missing values:

```{r}

# Find rows with missing values  
missing_values <- airquality[!complete.cases(airquality), ]  
missing_values
```

## Question 2: Find mean, sd,min,max for Temperature and Ozone Level

Output and Code for mean, sd, min, max for each of temperature and ozone level, accounting for missing values

Temperature and Ozone Summary Statistics:

```{r}
mean_temp <- round(mean(airquality$Temp, na.rm=T),2)
sd_temp <- round(sd(airquality$Temp, na.rm=T),2)
min_temp <- min(airquality$Temp, na.rm=T)
max_temp <- max(airquality$Temp, na.rm=T)

mean_ozone <- round(mean(airquality$Ozone, na.rm=T),2)
sd_ozone <- round(sd(airquality$Ozone, na.rm=T),2)
min_ozone <- min(airquality$Ozone, na.rm=T)
max_ozone <- max(airquality$Ozone,na.rm=T)


```

Output of summary statistics for Temperature and Ozone layer:

```{r}
#| echo: false
#display output 
# Print summary statistics for Temperature  
print(paste("Temperature - Mean:", mean_temp))
print(paste("Temperature - SD:", sd_temp))  
print(paste("Temperature - Min:", min_temp))  
print(paste("Temperature - Max:", max_temp))  

print(paste("Ozone - Mean:", mean_ozone))  
print(paste("Ozone - SD:", sd_ozone))  
print(paste("Ozone - Min:", min_ozone))  
print(paste("Ozone - Max:", max_ozone))   

```

## Question 3: Linear Regression for cars data

code displaying calculation of beta_hat estimates

```{r}
# Create the design matrix X (adding a column of ones for the intercept)  
X <- cbind(1, cars$speed)

# Create the response variable Y  
Y <- cars$dist  

# Calculate the beta estimates using the  beta_hat formula 
beta_hat <- solve(t(X) %*% X) %*% (t(X) %*% Y)
beta_hat




```

```{r}
#| echo: false
# Display the results  
cat("The beta estimates for B0 and B1 respectively are:", beta_hat, "\n") 
```

The `echo: false` option disables the printing of code (only output is displayed).

## Question 4: Linear Regression for cars data

Check that the beta coefficients we obtained from the b_hat matrix is the same when fitting the linear regression model using lm() in R.

```{r}
 model <- lm(cars$dist~ cars$speed)
 summary(model)
```

# Function to calculate statistics

This function is used to calculate the beta_hat estimates, p-value, standard error, and t-values of a simple linear regression model.

```{r}
f <- function(x, y){
  #set up X design matrix with column of ones for intercept 
  x <-  cbind(1, x)
  
  #estimate regression coeficient i.e. b_hat 
  b_hat <-  solve(t(x)%*%x)%*%t(x)%*%y
  
  #standard error of regression coeficients 
  Cmat <- solve(t(x) %*% x)
  #Estimate the residual VARIANCE, where sigma^2 is estimated by s^2
  
  #find k
  k <- ncol(x)
  nobs <- nrow(x)
  # Find s2 Calculate the residuals sums of squares given by (Y-XB)^T(Y-XB)
  rss <- t(y - x %*% b_hat) %*% (y - x %*% b_hat)
  #calculate s^2 = RSS / (n-k)
  s2 <-  as.numeric(rss)/(nobs - k) #since RSS is a 1x1 matrix convert to numeric scalar
  
  #find diagonals of C_mat
  c_ii <-  diag(Cmat)
  # Calculate the standard error of the regression coefficients
  std.error <-  sqrt(s2 * c_ii)
  
  #Calculate the t-value 
  tval <-  b_hat/std.error
  
  #Calculate p-value in Hypothesis testing 
pval <- 2 * (1 - pt(abs(tval), df = nobs - k))
  
  return(list('coeficients' = b_hat,
              'standard error' = std.error,
              't value' = tval,
              'p-value' = pval
    
  ))
}
```

This is an example of the above function using the cars dataset:

```{r}

(f(cars$speed, cars$dist))  

```

prac_1 done ;)
