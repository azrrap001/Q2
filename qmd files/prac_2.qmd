---
title: "Prac 2"
format: html
---

This section contains some Lowess theory followed by the practical

## LOWESS PRACTICAL

The goal of Lowess smoothing is to create a smooth curve that captures the underlying trend of the data while accounting for local structures and variation.

This is especially useful in datasets like noisy sine waves where the true relationship is obscured by noise

### **Steps to Implement Lowess Smoothing**

1.  **Understanding the data**

    -   **Goal**: Gather the observed data pairs as (x1​,y1​),…,(xn​,yn​), where x represents the independent variable and y is the dependent variable. We will generate sequences for x and create the corresponding y values using a sine function with added noise.

    2.  **Choosing the Span**
        -   **Goal**: Select a smoothing parameter (span) f where 0\<f\<1. This span determines how many neighboring points will influence the smoothed estimate for each xi

        -   **Calculation** k=⌈f⋅n⌉, where k is the number of closest neighbours used for point xi and n is the number of observations.

2.  **Computing Weights** - **Goal**: For each point xi , calculate the weight for each of its neighbors using the tricube kernel:

## PRACTICAL QUESTION

```{r}
#set seed to 1
set.seed(1)

#Generate simulated data 
n <- 100
x <- seq(1:n)
e <- rnorm(n, mean = 0 , sd = 0.2)
y <- sin(x/10) + e

#Implement the LOWESS Algorithm
customLowess <- function(x, y, f)
{
  nobs <-  length(x)
  smoothed_y <- numeric(nobs) #Initialize storage for smoothed y values 
  
  #determine k = number of closest neighbors based on the bandwidth (f)
  k = ceiling(f * nobs)
  
  #compute weights 
  #Calculate dmax 
  for (i in 1:n){
    #caclulate distance from current point 
    dist = abs(x - x[i]) #distance vector
    sort_dist_indices <-  order(dist) #give indices of sorted distance in ascending order 
    
    #find k closest neighbours 
    near_indices <- sort_dist_indices[1:k] #By taking the first k of these sorted indices, we get the indices of the nearest points
    
    #find corresponding co-ord for nearest neighbour points 
    x_neighbours <-  x[near_indices]#closest points are at those indices
    y_neighbours <-  y[near_indices]
    nearest_dist <- dist[near_indices]
    
    #Compute weights
    d_max <- max(nearest_dist)
    wj <- (1-(abs(nearest_dist)/d_max)^3)^3
    wj[abs(nearest_dist) >= d_max] <- 0 #condition is TRUE, the corresponding weight in the weights vector is set to 0
    
    X <- cbind(1, x_neighbours)
    W <- diag(wj) # Create diagonal weight matrix  
    
    #regression estimates
    beta_hat <- solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% y_neighbours
    
    smoothed_y[i] <- beta_hat[1] + beta_hat[2] %*% x[i]
    
  }
  return(list(x = x, smoothed_y =  smoothed_y))
}

```

Calling the above customLowess function and compare it with the built-in `lowess()` function with the same `f` value. Note: `iter` argument to 0

Below displays the plotted results for the customLowess function for f = 0.5

```{r}
library(graphics)
library(ggplot2)
result <- customLowess(x, y, f = 0.5)

# Plot the original data  
plot(y ~ x, main = "LOWESS Smoothing", xlab = "X-axis", ylab = "Y-axis", pch = 19) 

#add lowess line 
lines(result$x, result$smoothed_y, col = 'blue', lwd = 2)
```

Below displays the plotted results or the build-in Lowess function for f = 0.5

```{r}
# Plot the original data  
plot(y ~ x, main = "LOWESS Smoothing", xlab = "X-axis", ylab = "Y-axis", pch = 19) 

lines(lowess(x, y, f=0.5, iter = 0),col = 'red', lwd = 2)
```
