{
  "hash": "618337099315b1b17ea5ef4f2d6483fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Prac Day 4\"\neditor: visual\n---\n\n\n\n\nSET-UP:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install tidyverse if not already installed\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n# Install and load nycflights13 for flight data\nif (!requireNamespace(\"nycflights13\", quietly = TRUE)) {\n  install.packages(\"nycflights13\")\n}\nlibrary(nycflights13)\nlibrary(dplyr)  \nlibrary(tibble)\n```\n:::\n\n\n\n\n# Questions\n\n1.  Display the `flights` dataset in an alternative format to simply printing it (i.e. running `flights`).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert flights dataframe to a tibble\nUtilsDataRSV::view_cols(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"year\"\n[1] 539\n[1] \"_____________________\"\n[1] \"month\"\n[1] 1 6 9 3 2\n[1] \"_____________________\"\n[1] \"day\"\n[1] 11 17 25 10 27\n[1] \"_____________________\"\n[1] \"dep_time\"\n[1] 1658 1005  157 1548   NA\n[1] \"_____________________\"\n[1] \"sched_dep_time\"\n[1] 2008 1013 1915 1240 2038\n[1] \"_____________________\"\n[1] \"dep_delay\"\n[1] -20 -33 423 367  NA\n[1] \"_____________________\"\n[1] \"arr_time\"\n[1]  309 2118 1704 1149   NA\n[1] \"_____________________\"\n[1] \"sched_arr_time\"\n[1] 1509  232 2338 2216 1902\n[1] \"_____________________\"\n[1] \"arr_delay\"\n[1] 396  -1 231 -32  NA\n[1] \"_____________________\"\n[1] \"carrier\"\n [1] \"VX\" \"F9\" \"WN\" \"HA\" \"EV\" \"AS\" \"UA\" \"MQ\" \"US\" \"DL\" \"OO\" \"AA\" \"B6\" \"9E\" \"FL\"\n[16] \"YV\"\n[1] \"_____________________\"\n[1] \"flight\"\n[1]  444 1338 3284  430 1096\n[1] \"_____________________\"\n[1] \"tailnum\"\n [1] \"N506UA\" \"N927WN\" \"N409AS\" \"N312US\" \"N338AT\" \"N722MQ\" \"N110UW\" \"N607SW\"\n [9] \"N69806\" \"N3FGAA\" \"N364SW\" \"N550NW\" \"N542US\" \"N669UA\" \"N5CNAA\" \"N404WN\"\n[17] \"N186US\" \"N851VA\" \"N759GS\" NA      \n[1] \"4024 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"origin\"\n[1] \"EWR\" \"JFK\" \"LGA\"\n[1] \"_____________________\"\n[1] \"dest\"\n [1] \"STT\" \"SYR\" \"PSP\" \"DAY\" \"MSP\" \"SFO\" \"TYS\" \"RSW\" \"ROC\" \"BDL\" \"PWM\" \"XNA\"\n[13] \"HNL\" \"JAC\" \"BGR\" \"SLC\" \"BUF\" \"CHO\" \"ORF\" \"GSO\"\n[1] \"85 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"air_time\"\n[1] 226 622 209 354  NA\n[1] \"_____________________\"\n[1] \"distance\"\n[1]  828 1747 1167  872  212\n[1] \"_____________________\"\n[1] \"hour\"\n[1]  6  9 16 12 10\n[1] \"_____________________\"\n[1] \"minute\"\n[1] 23 56 53 35 16\n[1] \"_____________________\"\n[1] \"time_hour\"\n [1] \"2013-08-14 09:00:00 EDT\" \"2013-05-19 22:00:00 EDT\"\n [3] \"2013-01-16 16:00:00 EST\" \"2013-08-20 05:00:00 EDT\"\n [5] \"2013-04-13 07:00:00 EDT\" \"2013-08-17 07:00:00 EDT\"\n [7] \"2013-01-19 08:00:00 EST\" \"2013-02-02 21:00:00 EST\"\n [9] \"2013-05-08 10:00:00 EDT\" \"2013-08-29 17:00:00 EDT\"\n[11] \"2013-06-28 17:00:00 EDT\" \"2013-07-10 07:00:00 EDT\"\n[13] \"2013-04-29 14:00:00 EDT\" \"2013-09-14 16:00:00 EDT\"\n[15] \"2013-04-23 20:00:00 EDT\" \"2013-04-02 21:00:00 EDT\"\n[17] \"2013-06-15 23:00:00 EDT\" \"2013-09-15 07:00:00 EDT\"\n[19] \"2013-08-09 06:00:00 EDT\" \"2013-09-28 23:00:00 EDT\"\n[1] \"6916 unique entries not displayed\"\n[1] \"_____________________\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Not all unique entries displayed for these non-numeric cols: tailnum,\ndest, time_hour\n```\n\n\n:::\n\n```{.r .cell-code}\nflights <- as_tibble(flights)\nflights\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\nNow inspect unique values in each column to flights tibble\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUtilsDataRSV::view_cols(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"year\"\n[1] 1232\n[1] \"_____________________\"\n[1] \"month\"\n[1] 10  2  3  4  5\n[1] \"_____________________\"\n[1] \"day\"\n[1] 14 26 17 18  5\n[1] \"_____________________\"\n[1] \"dep_time\"\n[1] 1727  904  611 1626   NA\n[1] \"_____________________\"\n[1] \"sched_dep_time\"\n[1] 1207 1115 1437 1203 1544\n[1] \"_____________________\"\n[1] \"dep_delay\"\n[1] 151  98 142 324  NA\n[1] \"_____________________\"\n[1] \"arr_time\"\n[1] 1958 1835 1522 1111   NA\n[1] \"_____________________\"\n[1] \"sched_arr_time\"\n[1] 2221 1207 1049 1206 1844\n[1] \"_____________________\"\n[1] \"arr_delay\"\n[1] 244 183  57  16  NA\n[1] \"_____________________\"\n[1] \"carrier\"\n [1] \"WN\" \"OO\" \"AS\" \"FL\" \"DL\" \"US\" \"VX\" \"B6\" \"F9\" \"AA\" \"YV\" \"EV\" \"9E\" \"MQ\" \"UA\"\n[16] \"HA\"\n[1] \"_____________________\"\n[1] \"flight\"\n[1]  415 5254 4950 1222 1616\n[1] \"_____________________\"\n[1] \"tailnum\"\n [1] \"N3EFAA\" \"N549AA\" \"N613MQ\" \"N3738B\" \"N8974C\" \"N14953\" \"N810UA\" \"N994AT\"\n [9] \"N206UA\" \"N832AY\" \"N320AS\" \"N525VA\" \"N724SW\" \"N329AA\" \"N543AA\" \"N201AA\"\n[17] \"N784NC\" \"N940WN\" \"N334JB\" NA      \n[1] \"4024 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"origin\"\n[1] \"JFK\" \"LGA\" \"EWR\"\n[1] \"_____________________\"\n[1] \"dest\"\n [1] \"DSM\" \"LAS\" \"CLE\" \"RDU\" \"JAC\" \"PVD\" \"SDF\" \"MEM\" \"MTJ\" \"LAX\" \"BOS\" \"SJC\"\n[13] \"OMA\" \"SJU\" \"LGA\" \"DTW\" \"CVG\" \"PDX\" \"JAX\" \"ORF\"\n[1] \"85 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"air_time\"\n[1] 168  65 581 315  NA\n[1] \"_____________________\"\n[1] \"distance\"\n[1] 246 213 288 185 644\n[1] \"_____________________\"\n[1] \"hour\"\n[1]  6 21 15 22 17\n[1] \"_____________________\"\n[1] \"minute\"\n[1] 22 59 37 10  4\n[1] \"_____________________\"\n[1] \"time_hour\"\n [1] \"2013-05-23 07:00:00 EDT\" \"2013-07-25 09:00:00 EDT\"\n [3] \"2013-02-23 21:00:00 EST\" \"2013-01-08 20:00:00 EST\"\n [5] \"2013-07-12 13:00:00 EDT\" \"2013-04-06 13:00:00 EDT\"\n [7] \"2013-05-23 05:00:00 EDT\" \"2013-06-30 20:00:00 EDT\"\n [9] \"2013-08-02 23:00:00 EDT\" \"2013-11-08 12:00:00 EST\"\n[11] \"2013-11-04 07:00:00 EST\" \"2013-07-07 15:00:00 EDT\"\n[13] \"2013-06-24 14:00:00 EDT\" \"2013-11-05 20:00:00 EST\"\n[15] \"2013-04-18 14:00:00 EDT\" \"2013-09-07 05:00:00 EDT\"\n[17] \"2013-01-13 07:00:00 EST\" \"2013-01-21 10:00:00 EST\"\n[19] \"2013-12-10 16:00:00 EST\" \"2013-01-03 12:00:00 EST\"\n[1] \"6916 unique entries not displayed\"\n[1] \"_____________________\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Not all unique entries displayed for these non-numeric cols: tailnum,\ndest, time_hour\n```\n\n\n:::\n:::\n\n\n\n\n2.  Rewrite the following code using `dplyr` and the pipe:\n\n    This is the code before transformation.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flight1 <- flights[flights$month == 1, ]\n    (carrier_vec <- unique(flight1$carrier))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n     [1] \"UA\" \"AA\" \"B6\" \"DL\" \"EV\" \"MQ\" \"US\" \"WN\" \"VX\" \"FL\" \"AS\" \"9E\" \"F9\" \"HA\" \"YV\"\n    [16] \"OO\"\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    carrier_dist_vec_mean <- numeric(length(carrier_vec))\n    carrier_dist_vec_sd <- numeric(length(carrier_vec))\n    for (i in seq_along(carrier_vec)) {\n      carrier_dist_vec_mean[i] <- mean(\n        flight1$distance[flight1$carrier == carrier_vec[i]]\n       )\n      carrier_dist_vec_sd[i] <- sd(\n        flight1$distance[flight1$carrier == carrier_vec[i]]\n      )\n    }\n    dist_tbl <- tibble(\n      carrier = carrier_vec,\n      mean_distance = carrier_dist_vec_mean,\n      sd_distance = carrier_dist_vec_sd\n    )\n    dist_tbl[order(dist_tbl$mean_distance), ]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 16 × 3\n       carrier mean_distance sd_distance\n       <chr>           <dbl>       <dbl>\n     1 YV               229          0  \n     2 9E               476.       334. \n     3 EV               522.       294. \n     4 US               536.       553. \n     5 MQ               566.       223. \n     6 FL               691.       142. \n     7 OO               733         NA  \n     8 WN               942.       496. \n     9 B6              1062.       681. \n    10 DL              1220.       644. \n    11 AA              1350.       626. \n    12 UA              1462.       778. \n    13 F9              1620          0  \n    14 AS              2402          0  \n    15 VX              2495.        98.2\n    16 HA              4983          0  \n    ```\n    \n    \n    :::\n    :::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      filter(month == \"1\") |>  #Filter the data to include only flights from January\n      group_by(carrier) |> #Group the data  to perform calc. for each carrier.\n      summarise(\n        mean_distance = mean(distance, na.rm=T),#ignore NA values \n        sd_distance = sd(distance, na.rm=T),\n      ) |> \n      arrange(mean_distance)#ascending order \n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 16 × 3\n       carrier mean_distance sd_distance\n       <chr>           <dbl>       <dbl>\n     1 YV               229          0  \n     2 9E               476.       334. \n     3 EV               522.       294. \n     4 US               536.       553. \n     5 MQ               566.       223. \n     6 FL               691.       142. \n     7 OO               733         NA  \n     8 WN               942.       496. \n     9 B6              1062.       681. \n    10 DL              1220.       644. \n    11 AA              1350.       626. \n    12 UA              1462.       778. \n    13 F9              1620          0  \n    14 AS              2402          0  \n    15 VX              2495.        98.2\n    16 HA              4983          0  \n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n    This is the code after transformation using `dplyr` and the pipe:\n\n3.  Explain why the standard deviation is `NA` for one carrier, and why it is `0` for others. Demonstrate your answer using code.\n\n    ***Standard Deviation of NA*** occurs when observed flights has missing data in the distance column, and so when we calculate the standard deviation with those values we get an NA result.\n\n    ***Standard Deviation of 0*** indicates that all flights for a carrier have identical distances (no variability), leading to a standard deviation of `0`. This could mean that carrier's flights are operating under uniform conditions where they are scheduled to take the same route.\n\nbelow is the code demonstration:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(month == \"1\") |>  #Filter the data to include only flights from January\n  group_by(carrier) |> #Group the data  to perform calc. for each carrier.\n  summarise(\n    sd_distance = sd(distance, na.rm=T),\n    distance = list(distance) #lists associated distance of sd_distance\n  ) |> \n  #logical checks if either is TRUE row kept \nfilter(is.na(sd_distance)| sd_distance == 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  carrier sd_distance distance  \n  <chr>         <dbl> <list>    \n1 AS                0 <dbl [62]>\n2 F9                0 <dbl [59]>\n3 HA                0 <dbl [31]>\n4 OO               NA <dbl [1]> \n5 YV                0 <dbl [46]>\n```\n\n\n:::\n:::\n\n\n\n\nThe code filters January flights to find carriers with either `NA` or `0` standard deviations, displaying relevant results.\n\n4.  Using `tidyr` and `dplyr` where appropriate, construct a dataframe where the carriers are along the columns, and the rows are the average departure delay (`dep_delay`) flown by each carrier (`carrier`) in each month.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      group_by(carrier,month) |> #groups data by month and carrier \n      summarise(\n        avg_dep_delay = mean(dep_delay)) |> \n      pivot_wider(\n        names_from = carrier,\n        values_from = avg_dep_delay\n      )\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    \n    ```\n    `summarise()` has grouped output by 'carrier'. You can override using the\n    `.groups` argument.\n    ```\n    \n    \n    :::\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 12 × 17\n       month  `9E`    AA     AS    B6    DL    EV    F9    FL    HA    MQ    OO\n       <int> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n     1     1    NA    NA  7.35     NA    NA    NA 10     NA   54.4     NA  67  \n     2     2    NA    NA NA        NA    NA    NA NA     NA   17.4     NA  NA  \n     3     3    NA    NA  8.42     NA    NA    NA 16.8   NA    1.16    NA  NA  \n     4     4    NA    NA 11.3      NA    NA    NA 24.6   NA   -2.1     NA  NA  \n     5     5    NA    NA  6.77     NA    NA    NA 35.9   NA   -1.45    NA  NA  \n     6     6    NA    NA 13.1      NA    NA    NA 29.4   NA    1.47    NA  61  \n     7     7    NA    NA  2.42     NA    NA    NA 31.8   NA   -1.71    NA  NA  \n     8     8    NA    NA  2.87     NA    NA    NA 22.2   NA    1.68    NA  64  \n     9     9    NA    NA -4.52     NA    NA    NA NA     NA   -5.44    NA  NA  \n    10    10    NA    NA  0.677    NA    NA    NA  9.70  NA   -5.10    NA  NA  \n    11    11    NA    NA  3.08     NA    NA    NA NA     16.9 -5.44    NA   0.8\n    12    12    NA    NA 18.0      NA    NA    NA 13.1   NA   -3.14    NA  NA  \n    # ℹ 5 more variables: UA <dbl>, US <dbl>, VX <dbl>, WN <dbl>, YV <dbl>\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n5.  Calculate the proportion of flights that were delayed (`dep_delay` greater than 0) but arrived on or before time (`arr_delay` less than or equal to 0).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  summarise(\n    count = sum(dep_delay >0 & arr_delay <=0, na.rm = T),\n    total_flights = n(),\n    proportion = count/total_flights\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  count total_flights proportion\n  <int>         <int>      <dbl>\n1 35442        336776      0.105\n```\n\n\n:::\n\n```{.r .cell-code}\n#alternatively since we are dealing with a logical expressions we can directly get \n#the proprotion by taking the mean \n\nflights |> \n  summarise(proportion = mean(dep_delay > 0 & arr_delay <=0, na.rm=T ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  proportion\n       <dbl>\n1      0.108\n```\n\n\n:::\n:::\n\n\n\n\n*note: summarise is helpful for calculating summary statistics for the entire dataset/ groups*\n\n6.  Using the `airlines` and `flights` datasets, do the following, showing the output from each step:\n\n-   Identify routes that more than one airline flies\n\n-   For each such route, calculate the average arrival delay for each airline (exclude NAs). Find the names of these airlines.\n\n-   For each such route, identify the airline with the worst and best average arrival delay.\n\n-   Identify the route with the greatest difference between the best and worst performing airlines\n\n-   Determine the reason for this difference\n\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}