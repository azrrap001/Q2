---
title: "Prac Day 4"
editor: visual
---

SET-UP:

```{r}
# Install tidyverse if not already installed
if (!requireNamespace("tidyverse", quietly = TRUE)) {
  install.packages("tidyverse")
}
library(tidyverse)

# Install and load nycflights13 for flight data
if (!requireNamespace("nycflights13", quietly = TRUE)) {
  install.packages("nycflights13")
}
library(nycflights13)
library(dplyr)  
 

```

# Questions

1.  Display the `flights` dataset in an alternative format to simply printing it (i.e. running `flights`).

```{r}
# Convert flights dataframe to a tibble
library(tibble)
flights <- as_tibble(flights)
flights
```

Now inspect unique values in each column to flights tibble

```{r}
UtilsDataRSV::view_cols(flights_tib)

```

2.  Rewrite the following code using `dplyr` and the pipe:

    This is the code before transformation.

    ```{r}
    flight1 <- flights[flights$month == 1, ]
    (carrier_vec <- unique(flight1$carrier))
    carrier_dist_vec_mean <- numeric(length(carrier_vec))
    carrier_dist_vec_sd <- numeric(length(carrier_vec))
    for (i in seq_along(carrier_vec)) {
      carrier_dist_vec_mean[i] <- mean(
        flight1$distance[flight1$carrier == carrier_vec[i]]
       )
      carrier_dist_vec_sd[i] <- sd(
        flight1$distance[flight1$carrier == carrier_vec[i]]
      )
    }
    dist_tbl <- tibble(
      carrier = carrier_vec,
      mean_distance = carrier_dist_vec_mean,
      sd_distance = carrier_dist_vec_sd
    )
    dist_tbl[order(dist_tbl$mean_distance), ]
    ```

    ```{r}

    flights |> 
      filter(month == "1") |>  #Filter the data to include only flights from January
      group_by(carrier) |> #Group the data  to perform calc. for each carrier.
      summarise(
        mean_distance = mean(distance, na.rm=T),
        sd_distance = sd(distance, na.rm=T),
      ) |> 
      arrange(mean_distance)#ascending order 
      
    ```

    This is the code after transformation using `dplyr` and the pipe:

3.  Explain why the standard deviation is `NA` for one carrier, and why it is `0` for others. Demonstrate your answer using code.

    ***Standard Deviation of NA*** occurs when observed flights has missing data in the distance column, and so when we calculate the standard deviation with those values we get an NA result.

    ***Standard Deviation of 0*** indicates that all flights for a carrier have identical distances (no variability), leading to a standard deviation of `0`. This could mean that carrier's flights are operating under uniform conditions where they are scheduled to take the same route.

below is the code demonstration:

```{r}

flights |> 
  filter(month == "1") |>  #Filter the data to include only flights from January
  group_by(carrier) |> #Group the data  to perform calc. for each carrier.
  summarise(
    sd_distance = sd(distance, na.rm=T),
    distance = list(distance) #lists associated distance of sd_distance
  ) |> 
  #logical checks if either is TRUE row kept 
filter(is.na(sd_distance)| sd_distance == 0)
  

```

The code filters January flights to find carriers with either `NA` or `0` standard deviations, displaying relevant results.

4.  Using `tidyr` and `dplyr` where appropriate, construct a dataframe where the carriers are along the columns, and the rows are the average departure delay (`dep_delay`) flown by each carrier (`carrier`) in each month.

```{r}
#Group carrier by each mouth 
flights |> group_by(month, carrier) |> summarise()


flights_Q4 <-  flights |>
  pivot_wider(
    id_cols = c("dep_delay", "carrier"),
    names_from = carrier,
    values_from = flights |> group_by(month) |> summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
  )

```

```{r}
# Calculate average departure delay by month and carrier  
flights_avg_delay <- flights |>  
  group_by(month, carrier) |>  
  summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE), .groups = 'drop') |>  
  pivot_wider(  
    names_from = carrier,  
    values_from = avg_dep_delay  
  )  

# Display the resulting dataframe  
print(flights_avg_delay)  
```
